#!/usr/bin/env groovy


import groovy.io.FileType
import groovy.json.JsonSlurper
import static groovy.io.FileType.FILES

def scriptFile = getClass().protectionDomain.codeSource.location.path
def scriptDir = new File(getClass().protectionDomain.codeSource.location.path).parent

hudson.FilePath workspace =  hudson.model.Executor.currentExecutor().getCurrentWorkspace()

def jsonFiles=getJsonFiles(workspace.toString())
def odinCredentialsID = 'e5a060d0-b023-4c3b-92c8-f2d8e48e53e8'
def repoOwner = 'odinsol'

jsonFiles.each { jsonFile ->
  jobFolder = jsonFile.parent.toString().split('/').last()
  jsonData = readJsonFile(jsonFile.toString())

  jobName = jobFolder + '_' + jsonFile.toString().split('/').last() - '.json'
  if (jsonData.containsKey('job_name')) {
    if (jsonData['job_name'] != '' ) {
      jobName = jsonData['job_name']
    }
  }
  
  gitBranch = ''
  if (jsonData.containsKey('git_branch')) {
    gitBranch = jsonData['git_branch']
  }

  multiBranch = true
  if (jsonData.containsKey('multibranch')) {
    multiBranch = jsonData['multibranch'] 
  }

  repo = jsonData['git_repo']

  if (! multiBranch ) {
    // declare pipeline (not multibranch)
    println 'Setting up declarative pipeline job' + jobName
    pipelineJob(jobName) {
      displayName(jobName)
      definition {
        cpsScm {
          scm {
            git {
              remote { url(repo) }
              branches(gitBranch)
              scriptPath(jsonData['jenkinsfile'])
              extensions { }  // required as otherwise it may try to tag the repo, which you may not want
            }
    
            // the single line below also works, but it
            // only covers the 'master' branch and may not give you
            // enough control.
            // git(repo, 'master', { node -> node / 'extensions' << '' } )
          }
        }
      }
    }
  }

  if ( multiBranch ) {
    println 'Setting up multibranch pipeline job' + jobName

/*

https://github.com/jenkinsci/bitbucket-branch-source-plugin


multibranchPipelineJob("job") {
  branchSources {
    branchSource {
      source {
        bitbucket {


//          id('123456789') // IMPORTANT: use a constant and unique identifier
//          remote(repo)
//          credentialsId(odinCredentialsID)
//          includes('JENKINS-*')

          credentialsId(odinCredentialsID)
          repoOwner(repoOwner)
          repository(repo)                       
          traits {
            headWildcardFilter {
              includes("branchestoinclude")
              excludes("toexclude")
            }
          }
        }
      }
      strategy {
        defaultBranchPropertyStrategy {
          props {
            // keep only the last 8 builds
            buildRetentionBranchProperty {
              buildDiscarder {
                logRotator {
                  daysToKeepStr("-1")
                  numToKeepStr("8")
                  artifactDaysToKeepStr("-1")
                  artifactNumToKeepStr("-1")
                }
              }
            }
          }
        }
      }
    }
  }
  // Branch behaviour
  configure {
    def traits = it / sources / data / 'jenkins.branch.BranchSource' / source / traits
    traits << 'com.cloudbees.jenkins.plugins.bitbucket.BranchDiscoveryTrait' {
      strategyId(3) // detect all branches -refer the plugin source code for various options
    }
  }
  orphanedItemStrategy {
    discardOldItems {
      numToKeep(8)
    }
  }
}
*/


    multibranchPipelineJob(jobName) {
      branchSources {
        git {
          id('123456789') // IMPORTANT: use a constant and unique identifier
          remote(repo)
          credentialsId(odinCredentialsID)
          includes('JENKINS-*')
        }
      }
      orphanedItemStrategy {
        discardOldItems {
          numToKeep(20)
        }
      }
    }
  }
  
}




def readJsonFile(jsonFile) {
  Map jsonData = [:]


  try {
    jsonSlurper = new JsonSlurper()
    jsonData = jsonSlurper.parse(new File(jsonFile))
  }
  catch(err)  {
    println  "Err: failed when loading JSON file ${jsonFile} with Error: " + err.toString()
    throw err
  }

  return jsonData
}


def getJsonFiles(workspace) {

  def jsonFiles = []
  new File(workspace).eachFileRecurse(FILES) {
      if(it.name.endsWith('.json')) {
          jsonFiles << it
      }
  }
  return jsonFiles
}

