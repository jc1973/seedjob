#!/usr/bin/env groovy


import groovy.io.FileType
import groovy.json.JsonSlurper
import static groovy.io.FileType.FILES

def scriptFile = getClass().protectionDomain.codeSource.location.path
def scriptDir = new File(getClass().protectionDomain.codeSource.location.path).parent

hudson.FilePath workspace =  hudson.model.Executor.currentExecutor().getCurrentWorkspace()

def jsonFiles=getJsonFiles(workspace.toString())

jsonFiles.each { jsonFile ->
    jobFolder = jsonFile.parent.toString().split('/').last()
    jsonData = readJsonFile(jsonFile.toString())

    jobName = jobFolder + '_' + jsonFile.toString().split('/').last() - '.json'
    if (jsonData.containsKey('job_name')) {
      if (jsonData['job_name'] != '' ) {
        jobName = jsonData['job_name']
      }
    }
    
    gitBranch = ''
    if (jsonData.containsKey('git_branch')) {
      gitBranch = jsonData['git_branch']
    }

    pipelineJob(jobName) {
  
    def repo = jsonData['git_repo']
  
    displayName(jobName)
  
    definition {
      cpsScm {
        scm {
          git {
            remote { url(repo) }
            branches(gitBranch)
            scriptPath(jsonData['jenkinsfile'])
            extensions { }  // required as otherwise it may try to tag the repo, which you may not want
          }
  
          // the single line below also works, but it
          // only covers the 'master' branch and may not give you
          // enough control.
          // git(repo, 'master', { node -> node / 'extensions' << '' } )
        }
      }
    }
  }
  
}




def readJsonFile(jsonFile) {
  Map jsonData = [:]


  try {
    jsonSlurper = new JsonSlurper()
    jsonData = jsonSlurper.parse(new File(jsonFile))
  }
  catch(err)  {
    println  "Err: failed when loading JSON file ${jsonFile} with Error: " + err.toString()
    throw err
  }

  return jsonData
}


def getJsonFiles(workspace) {

  def jsonFiles = []
  new File(workspace).eachFileRecurse(FILES) {
      if(it.name.endsWith('.json')) {
          jsonFiles << it
      }
  }
  return jsonFiles
}

